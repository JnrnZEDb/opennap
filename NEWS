[opennap 0.25]

added a new configuration variable `config_dir' which controls the location
where opennap looks for its config files (users, servers, bans, motd,
channels), and removed the file-specific configuration variables:
user_db_path, server_db_path and motd_path.

added persistent channel configuration file: channels.  This file allows
creation of channels which always exist even if no users are in them, along
with the default level and limit.  See sample.channels for an example.

added the OperServ `usermode' command to allow privileged users (Moderator
or higher) to selectively turn off server notifications about things such as
kills, muzzles and bans.  See the README file for details.

[opennap 0.24]

md5 passwords are now used to store user passwords on disk.  A new utility
called 'mkpass' is now used to generate a md5 password from plaintext
password when first setting up the server.  See the README file for details.

Added support for the clear channel (820) user command which will remove all
users of a lesser user level than the usr who issued the command.

When compiled with debugging support, sending SIGUSR1 to the opennap process
will cause it to dump the table of allocated memory.

Added virtual user "OperServ" which accepts commands via /msg.  This is
intended to provide support for clients which have no built in support for
the opennap extensions.  See the README file for a complete list of accepted
commands.

Added channel limit command (826) to specify the maximum number of users
allowed in a channel.

Added new channel list command (827/828) which shows additional information
about the channels such as the mimium level required for entry, and the
channel limit.

Added the nuke command to remove a registered user from the database.

The stats and links commands are now accessible to unprivileged users.

Bans are now saved and reloaded (default: /usr/local/share/opennap/bans)
on startup.

[opennap 0.23]

Server was fixed to compile without zlib for use as a standalone server.
This makes it much easier to compile under Win32 platforms.

Server now crops public and emote messages longer than 128 to prevent
exploitation of the DoS attack against the Windows Napster client.

opennap should now consume considerably less CPU time.  It now attempts to
accept() as many incoming connections as possible per iteration of the main
event loop.

The user database is now read into memory for fast lookup.  It is dumped to
disk every `user_db_interval' seconds (default: 1800)

opennap are now aware of all servers in the cluster that are linked.  The
`server links' command was modified to present this information.

Added new administrative commands for registering a nick and changing a user's
reported line speed.

opennap now prints bandwidth usage stats as part of its logging messages.

[opennap 0.22]

MySQL is no longer used in opennap.  The users and servers databaseses are
now handled as a flat text files.  The location of these files is controlled
by the new configuration variables `user_db_path' and `server_db_path'.  See
the README file for more details.

OS/2 port by Brian Smith <dbsoft@technologist.com>.

Solaris port by jones@users.sourceforge.net.

[opennap 0.20]

opennap will now listen on port 8889 in addition to the client connection
port.  When a connection is made to port 8889 it will display some
information about the status of the server, similar the the stats command
in the napster protocol.  This is intended to be usesful for clients to
query various servers to see their stats without having to log into each
one.

added max_nick_length configuration variable which controls the maximum
length a nickname is allowed to be (default: 32).  It can be set to 0
to indicate no maximum.  The protocol itself doesn't care how long nicks
are, but this puts a cap for readability in clients.

added --with-fd-setsize configure option to allow select() based systems
with a small default value (such as 256 under BSDI) to compile with a higher
maximum for more connections.

added new configuration variable connection_hard_limit to specify the
maximum number of connections that the process will ever be able to support
(default: 1024).  Note that this is different from the max_connections
variable which controls how many connections are allowed at the given
moment.  The reason for this variable is that on some systems you are
not allowed to increase the hard limit of file descriptors for a process
unless you have root privileges.  If run as root, opennap consults
connection_hard_limit to set the hard limit before dropping root privileges.

as described above, opennap can now be run as root when more file
descriptors per process than default is required.  new variables `uid' and
`gid' were added to specify the user and group to run as after changing
the resouce limits.  By default, opennap will attempt to find the uid/gid
for `nobody/nobody' and run as such.

opennap has been ported to Windows 2000 thanks to Damian Hodgkiss.

MySQL is no longer used to store the file database.  A custom memory based
solution was used in order to speed up the searches.  This requires more
memory, but the load is very low when searching.
